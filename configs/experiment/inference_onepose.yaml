# @package _global_

type: inference


# data_base_dir: "data/datasets/test_data"
# sfm_base_dir: "data/datasets/sfm_output"

data_base_dir: "/media/wangxiao/Newsmy/dataset_LINEMOD/datasets/train_data"
sfm_base_dir: "/media/wangxiao/Newsmy/dataset_LINEMOD/datasets/sfm_output"
gs_dir: "/media/wangxiao/Newsmy/dataset_LINEMOD/datasets/train_data_pgsr"



gs:
  use_gs: False

match_type: softmax
task_name: inference_onepose
verbose: False

use_global_ray: False
use_local_ray: True

ray:
  slurm: False
  n_workers: 4
  n_cpus_per_worker: 5
  n_gpus_per_worker: 1
  local_mode: False

model:
  pretrained_ckpt: weight/OnePosePlus_model.ckpt

  OnePosePlus:
    loftr_backbone:
      type: "ResNetFPN"
      resolution: [8, 2]
      resnetfpn:
        block_type: "BasicBlock"
        initial_dim: 128
        block_dims: [128, 196, 256]
        output_layers: [3, 1]
      pretrained: "weight/LoFTR_wsize9.ckpt"
      pretrained_fix: False

    interpol_type: "bilinear"

    keypoints_encoding:
      enable: True
      type: mlp_linear
      descriptor_dim: 256
      keypoints_encoder: [32, 64, 128]
      norm_method: "instancenorm"

    positional_encoding:
      enable: True
      pos_emb_shape: [256, 256]

    loftr_coarse:
      type: "LoFTR"
      d_model: 256
      d_ffm: 128
      nhead: 8
      layer_names: ["self", "cross"]
      layer_iter_n: 3
      dropout: 0.
      attention: "linear"
      norm_method: "layernorm"

      kernel_fn: "elu + 1"
      d_kernel: 16
      redraw_interval: 2
      rezero: null
      final_proj: False

    coarse_matching:
      type: "dual-softmax"
      thr: 0.1
      feat_norm_method: "sqrt_feat_dim"
      border_rm: 2

      dual_softmax:
        temperature: 0.08

      train:
        train_padding: True # Good to be true
        train_coarse_percent: 0.3 # save GPU memory
        train_pad_num_gt_min: 200 # avoid deadlock; better convergence

    loftr_fine:
      enable: True
      # Fine preprocess:
      window_size: 5
      coarse_layer_norm: False

      # Fine module
      type: "LoFTR"
      d_model: 128
      nhead: 8
      layer_names: ["self", "cross"]
      layer_iter_n: 1
      dropout: 0.0
      attention: "linear"
      norm_method: layernorm

      kernel_fn: "elu + 1"
      d_kernel: 16
      redraw_interval: 2
      rezero: null
      final_proj: False

    fine_matching:
        enable: True
        type: 's2d'

        s2d:
            type: 'heatmap'

  eval_metrics:
    point_cloud_rescale: 1000
    pnp_reprojection_error: 3.3
    pose_thresholds: [1, 3, 5]
    model_unit: 'm'
    eval_ADD_metric: False
    use_pycolmap_ransac: False

datamodule:
    # 3D part
    shape3d_val: 7000
    load_3d_coarse: True
    pad3D: False # Use all 3D points

    # 2D part
    img_pad: False
    img_resize: [512, 512]
    df: 8
    coarse_scale: 0.125

network:
  detection: loftr
  matching: loftr

object_detector_method: "GT"
data_dir: ${data_base_dir}
top_k_obj: null
num_val_seq: 1 # last n sequences
ids:
    - '0575'
    # - '0408'
    # - '0409'
    # - '0419'
    # - '0422'
    # - '0423'
    # - '0424'
    # - '0447'
    # - '0450'
    # - '0452'
    # - '0455'
    # - '0456'
    # - '0458'
    # - '0459'
    # - '0466'
    # - '0468'
    # - '0469'
    # - '0470'
    # - '0471'
    # - '0472'
    # - '0473'
    # - '0474'
    # - '0476'
    # - '0480'
    # - '0483'
    # - '0486'
    # - '0487'
    # - '0488'
    # - '0489'
    # - '0490'
    # - '0492'
    # - '0493'
    # - '0494'
    # - '0495'
    # - '0496'
    # - '0497'
    # - '0498'
    # - '0500'
    # - '0501'
    # - '0502'
    # - '0503'
    # - '0504'
    # - '0508'
    # - '0510'
    # - '0511'
    # - '0517'
    # - '0518'
    # - '0519'
    # - '0520'
    # - '0521'
    # - '0522'
    # - '0523'
    # - '0525'
    # - '0526'
    # - '0527'
    # - '0534'
    # - '0535'
    # - '0537'
    # - '0539'
    # - '0543'
    # - '0547'
    # - '0548'
    # - '0550'
    # - '0551'
    # - '0552'
    # - '0557'
    # - '0558'
    # - '0559'
    # - '0560'
    # - '0564'
    # - '0565'
    # - '0568'
    # - '0570'
    # - '0577'
    # - '0578'
    # - '0579'
    # - '0580'
    # - '0582'
    # - '0583'
    # - '0594'
    # - '0595'

exception_obj_names: 
    -

output:
  txt_dir: 'data/output/${task_name}'